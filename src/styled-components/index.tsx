import React, { ReactNode, useState } from "react";
import { cn } from "~/utils/classNames";

function HoverBox({ children }: { children: ReactNode }) {
  return (
    <div className="absolute bottom-full left-0 mb-2 rounded border bg-white p-2 shadow-lg">
      {children}
    </div>
  );
}

export function TranslateText({ children }: { children: ReactNode }) {
  return (
    <span
      style={{
        textDecoration: "underline dotted",
        textDecorationThickness: "0.1rem", // Increase the thickness of the dots
        textDecorationStyle: "dotted",
        textUnderlineOffset: "5px", // Adjusts the spacing between text and underline
      }}
      className="text-black-500"
    >
      {children}
    </span>
  );
}

// TODO(artur): Find better name, preferably short, as it should be used a lot whenever some highlighting is needed.
export function HighlightText({ children }: { children: ReactNode }) {
  return <span className="font-bold text-blue-500">{children}</span>;
}

export function CText({
  children,
  ipa,
  className,
}: {
  children: ReactNode | ReactNode[];
  ipa?: string;
  className?: string;
}) {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <span className="relative">
      <span
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        className={cn("text-black-500 font-bold", className)}
      >
        {children}
      </span>
      {/*
        TODO(artur): Implement a way to automatically generate IPA from the text.
        NOTE(artur): The orthography is not 100% phonetic, thus it is not possible to 
                     generate completely correct IPA 100% all the time. 
                     For example Ð¿I could either mean /p'/ or /p?/, depending on the word.
                     For this one should also probably a small link to some orthography guide. 
        TODO(artur): Probably it is best to color code whether the IPA is autogenerated or not. 
                     Maybe grey, if autogenerated, black if by hand.

      */}
      {isHovered && ipa && <HoverBox>{"/" + ipa + "/"}</HoverBox>}
    </span>
  );
}

// TODO(artur): Make better breakpoints.
export function GrammarBookContainer({ children }: { children: React.ReactNode }) {
  return <div className="md m-2 mx-auto w-[97%] bg-white p-4 md:max-w-screen-md">{children}</div>;
}

enum DisplayState {
  Default,
  Expanded,
  Collapsed,
}
//SNIPPET:
// <ExampleListContainer>
//   <SimpleTranslationExample>
//     <></>
//     <></>
//   </SimpleTranslationExample>
// </ExampleListContainer>;
export function ExampleListContainer({ children }: { children: ReactNode[] | ReactNode }) {
  const [displayState, setDisplayState] = useState<DisplayState>(DisplayState.Default);
  const maxDefaultLength = 3;

  const renderChildren = () => {
    if (displayState === DisplayState.Collapsed) {
      return null;
    }

    if (Array.isArray(children)) {
      if (displayState === DisplayState.Default && children.length > maxDefaultLength) {
        const visibleChildren = children.slice(0, maxDefaultLength);
        const numRemaining = children.length - maxDefaultLength;
        return (
          <>
            {visibleChildren.map((child, index) => (
              <li key={index}>{child}</li>
            ))}
            <span
              key="more"
              className="mt-4 cursor-pointer items-center text-center font-bold text-green-500 hover:text-green-700"
              onClick={() => setDisplayState(DisplayState.Expanded)}
            >
              <div className="rotate-90">...</div>
              <div className="">{numRemaining} more examples</div>
            </span>
          </>
        );
      } else if (displayState === DisplayState.Expanded && children.length > maxDefaultLength) {
        return (
          <>
            {children.map((child, index) => (
              <li key={index}>{child}</li>
            ))}
            <span
              key="less"
              className="mt-4 cursor-pointer items-center text-center font-bold text-green-500 hover:text-green-700"
              onClick={() => setDisplayState(DisplayState.Default)}
            >
              <div className="rotate-90">...</div>
              <div className="">less examples</div>
            </span>
          </>
        );
      }
      return children.map((child, index) => <li key={index}>{child}</li>);
    }
    return <li>{children}</li>;
  };

  return (
    <div className="rounded border border-green-500 bg-green-100 shadow">
      <div className="flex items-center justify-end border-b border-green-500 bg-green-100 p-0 text-xs">
        <span
          className={`cursor-pointer ${displayState === DisplayState.Default ? "font-bold" : ""}`}
          onClick={() => setDisplayState(DisplayState.Default)}
        >
          Default
        </span>
        |
        <span
          className={`cursor-pointer ${displayState === DisplayState.Expanded ? "font-bold" : ""}`}
          onClick={() => setDisplayState(DisplayState.Expanded)}
        >
          Expanded
        </span>
        |
        <span
          className={`cursor-pointer ${displayState === DisplayState.Collapsed ? "font-bold" : ""}`}
          onClick={() => setDisplayState(DisplayState.Collapsed)}
        >
          Collapsed
        </span>
      </div>
      <ul
        className={`list-inside list-disc p-4 ${displayState === DisplayState.Collapsed ? "hidden" : ""}`}
      >
        {renderChildren()}
      </ul>
    </div>
  );
}

export function SimpleTranslationExample({
  children,
  ipa,
}: {
  children: [React.ReactNode, React.ReactNode];
  ipa?: string;
}) {
  return (
    <>
      <CText ipa={ipa}>{children[0]}</CText> - <TranslateText>{children[1]}</TranslateText>
    </>
  );
}
